BFS 的核心思想应该不难理解的，就是把一些问题抽象成图，从一个点开始，向四周开始扩散。
一般来说，我们写 BFS 算法都是用「队列」这种数据结构，每次将一个节点周围的所有节点加入队列。

BFS 相对 DFS 的最主要的区别是：BFS 找到的路径一定是最短的，但代价就是空间复杂度可能比 DFS 大很多。


BFS算法问题的本质就是让你在一幅「图」中找到从起点 start 到终点 target 的最近距离，
BFS 的本质：就是一幅「图」，让你从一个起点，走到终点，问最短路径。

BFS记住下面这个框架就 OK 了
// 计算从起点 start 到终点 target 的最近距离
func BFS(start Node, target Node) int {
    q := make([]Node, 0) // 核心数据结构
    visited := make(map[Node]bool) // 避免走回头路

    q = append(q, start) // 将起点加入队列
    visited[start] = true

    for len(q) > 0 {
        sz := len(q)
        /* 将当前队列中的所有节点向四周扩散 */
        for i := 0; i < sz; i++ {
            cur := q[0]
            q = q[1:]
            /* 划重点：这里判断是否到达终点 */
            if cur == target {
                return step
            }
            /* 将 cur 的相邻节点加入队列 */
            for _, x := range cur.adj() {
                if _, ok := visited[x]; !ok {
                    q = append(q, x)
                    visited[x] = true
                }
            }
        }
    }
    // 如果走到这里，说明在图中没有找到目标节点
}

