
简单工厂：简单工厂模式违反了开闭原则，严格意义上不算是一个设计模式，它主要包括三个结构，分别是工厂、抽象产品和具体产品。
工厂方法：工厂方法模式符合开闭原则，它相比简单工厂模式，多了一个抽象工厂的结构，总共包括四个结构，分别是抽象工厂、具体工厂、抽象产品和具体产品。
抽象工厂：抽象工厂模式也是总共包括四个结构，它与工厂方法模式不同，工厂方法模式中抽象产品只有一个，而抽象工厂模式抽象产品有多个。

工厂方法模式通常适用于以下场景：
客户只知道创建产品的工厂名，而不知道具体的产品名。如 order工厂、pod工厂等。
创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口。
客户不关心创建产品的细节，只关心产品的品牌。

工厂负责生成产品，产品负责完成方法任务。

eg：
巡检模块使用工厂方法：
定义一个包含一组方法[获取、计算、上传]的 巡检异常事项：inspectItem 接口，代表抽象产品；
定义一个 order订单异常 结构体和一个 pod实例异常 结构体，并都实现 inspectItem 接口，代表具体产品；
定义一个包含生成抽象产品：inspectItem 的 IFactory 接口，代表抽象工厂；
定义一个 orderFactory 结构体和一个 podFactory 结构体，并都实现 IFactory 接口，代表具体工厂；

使用：
通过具体子工厂orderFactory创建对象，来调用对应的获取、计算、上传方法，完成巡检任务。


扩展性：新增backup备份异常、nodePort异常等，符合开闭原则。



