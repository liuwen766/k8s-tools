策略模式主要用于允许我们的程序在运行时动态更改一个任务的处理逻辑，常见的应用场景有针对软件用户群体的不同策略切换和业务流程兜底切换。
策略模式要解决的问题是，让使用客户端跟具体执行任务的策略解耦，不管使用哪种策略完成任务，不需要更改客户端使用策略的方式。

策略模式主要有四类角色：
客户端：这个客户端可以简单理解成是发起任务调用的代码。
抽象策略：就是上面定义中的算法族，是所有具体策略的通用接口，声明了用于执行完成任务的方法。
具体策略：实现了抽象策略，定义了具体应该怎么完成任务。
上下文：作为客户端和具体策略的中间层，达到客户端与具体策略解耦的效果，它维护指向具体策略的引用，且仅通过抽象策略中定义的接口与具体策略进行交流。
常用的实现方式是通过组合。

细节：上下文对象引用具体策略类的时候，使用的是组合的方式，让其私有属性指向策略接口的具体实现，这样就能完成在运行时修改执行任务的具体策略的效果。


eg：
NetWorkBehavior：抽象策略，对网络连接任务进行接口抽象。
IpV4Connect 和 IpV6Connect ：是具体的网络策略实现。
NetWorkCtx：上下文对象在这里有两个作用，第一是协调自己持有的 NetWorkBehavior 具体实现，完成支付的任务，
第二是维护发起支付需要的网络参数。持有完成这个任务所必需的那些入参netParams。

程序调用：
默认先IpV4Connect，如果连接不上，则IpV6Connect。
